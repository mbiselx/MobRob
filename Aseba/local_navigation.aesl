<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="20" name="BLIND_TURN_DELAY"/>
<constant value="-20" name="BLIND_TURN_RADIUS_L"/>
<constant value="20" name="BLIND_TURN_RADIUS_R"/>
<constant value="100" name="E_DIV"/>
<constant value="75" name="NO_OBSTACLE_STEPS_MAX"/>
<constant value="10" name="P"/>
<constant value="67" name="REDUCED_SPEED_1"/>
<constant value="44" name="REDUCED_SPEED_2"/>
<constant value="1700" name="REF"/>
<constant value="0" name="STATE_LEFT"/>
<constant value="3" name="STATE_NONE"/>
<constant value="1" name="STATE_RIGHT"/>
<constant value="10" name="IGNORE_WALL_DELAY"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II"># state
var side_state = 3
var old_state  = 3
var no_obstacle_steps = 0

# controller
var speed
var sensor_2_factor = 1
var sensor_3_factor = 2
var speed_reduction = 1

# blind turn parameters
var blind = 0

var distance_left
var distance_right
var e
var speed_left
var speed_right
var i
var ignore_wall = 0

event.args[0] = 2

timer.period[0] = 200   # 200ms sampling time

onevent timer0
if event.args[0] == 2 then
		ignore_wall += 1
		if ignore_wall > IGNORE_WALL_DELAY then
				ignore_wall = 0
				event.args[0] = 0
		end
elseif  event.args[0] == 1 then
    speed = 50
    # read and transform sensor data
    distance_left =  prox.horizontal[0]
    distance_right = prox.horizontal[4]

    # define current state
    if distance_left == 0 and distance_right == 0 then
        no_obstacle_steps = no_obstacle_steps + 1
        if no_obstacle_steps > NO_OBSTACLE_STEPS_MAX then
            side_state = STATE_NONE
        end
    elseif distance_left > distance_right then
        side_state = STATE_LEFT
        no_obstacle_steps = 0
    elseif distance_left &lt; distance_right then
        side_state = STATE_RIGHT
        no_obstacle_steps = 0
    end

    # check if state has changed
    if old_state != side_state then
    		old_state = side_state
    		blind = 0
    		event.args[1] = side_state
	end

    # calculate the error which depends on the current state
    if side_state == STATE_NONE then
    		e = 0
    		event.args[0]=0
    elseif side_state == STATE_LEFT then
        # blind turn
        if distance_left == 0 then
            # wait before turning
            if blind > BLIND_TURN_DELAY then
                e = BLIND_TURN_RADIUS_L
            else
                e = 0
                blind = blind + 1
            end
        else
            e = -(REF - distance_left)/E_DIV
            blind = 0
        end
        # turn harder if the obstacle is in front of the robot
        if prox.horizontal[1] > 0 and e > 0 then
            e = e * sensor_2_factor
            speed = REDUCED_SPEED_1
        end
        if prox.horizontal[2] > 0 and e > 0 then
            e = e * sensor_3_factor
            speed = REDUCED_SPEED_2
        end

    elseif side_state == STATE_RIGHT then
        if distance_right == 0 then
            if blind > BLIND_TURN_DELAY then
                e = BLIND_TURN_RADIUS_R
            else
                e = 0
                blind = blind + 1
            end
        else
            e = -(distance_right - REF)/E_DIV
            blind = 0
        end
        if prox.horizontal[3] > 0 and e &lt; 0 then
            e = e * sensor_2_factor
            speed = REDUCED_SPEED_1
        end
        if prox.horizontal[2] > 0 and e &lt; 0 then
            e = e * sensor_3_factor
            speed = REDUCED_SPEED_2
        end
    end

    speed_left = P * e * side_state + speed # change only if wall is on the right
    speed_right = - P * e * (1 - side_state) + speed # change only if wall is on the left
    motor.left.target = speed_left
    motor.right.target = speed_right
end

onevent prox
if event.args[0] != 2 then
	for i in 0:4 do
		if  event.args[0] == 0 and prox.horizontal[i] > 0 then
				event.args[0] = 1
		end
	end
elseif prox.horizontal[2] != 0 then
	event.args[0] = 1
end

onevent button.center
if button.center == 1 then
	event.args[0] = 2
	motor.left.target = 0
	motor.right.target = 0
end</node>


</network>
